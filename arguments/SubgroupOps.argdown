## Robust Buffer Access
<!--
Expose a subset of subgroup operations in WGSL shaders:
  - support: https://github.com/gpuweb/gpuweb/issues/78
  - investigation: https://github.com/gpuweb/WSL/issues/5
  - PR: https://github.com/gpuweb/gpuweb/pull/954
-->

[Extension]: We should have an extension to expose subgroup operations.
  + <Performance>: depending on a workload and the platform, it's possible to run [multiple times](https://developer.nvidia.com/blog/cuda-pro-tip-optimized-filtering-warp-aggregated-atomics/) faster.
  + <Support>: all 3 target APIs have some variation of subgroup operations, optionally.

[Size Control]: We should let the developer to control the size of subgroups (in compute workloads).
  + Vulkan has [VK_EXT_subgroup_size_control](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_EXT_subgroup_size_control.html) extension to control the size.
  - D3D12 and Metal don't allow to control the size.

[Size Query]: We should allow the developer to query the subgroup size from a compute pipeline.
  + Vulkan has [VK_KHR_pipeline_executable_properties](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_KHR_pipeline_executable_properties.html) extension to query the size.
  + Metal has [threadExecutionWidth](https://developer.apple.com/documentation/metal/mtlcomputepipelinestate/1414911-threadexecutionwidth) to query the size.
  - D3D12 doesn't have anything to query the exact size.
  - <Useless>: it's not actionable in Vulkan and D3D12, unlike Metal where we can control the workgroup size from the API.

[Quad Ops]: We should expose the quad operations in fragment shaders.
  - new Adreno and PowerVR hardware doesn't support this
//TODO: fill this out more

[Non-uniform]: We should support the non-uniform subgroup model.
  + <Everywhere>: Vulkan, D3D, and Metal use a non-uniform model.
  - <Ambiguous Divergence>: when invocations in a subgroup are executing "together", how long is that guaranteed?
  - <Ambiguous Reconvergence>: once invocations diverge, what are the guarantees about where you reconverge?
    + Vulkan has weak guarantees, D3D12 and Metal don't have anything.
    - we can just say invocations never reconverge, which matches AMD ISA and CUDA models.
  - <Ambiguous Forward Progress>: how blocks affect progress of other blocks, and invocations within blocks affect progress on other invocations?
    + D3D, Metal, and Vulkan are silent on both of these.
  - <Ambiguous Helpers>: do helper invocations participate in subgroup operations?
